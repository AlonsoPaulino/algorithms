#include <bits/stdc++.h>
#define pi acos(-1)
#define sz(x) (int) x.size()
#define pii pair<int, int>
#define mii map<int, int>
#define vi vector<int>
#define vb vector<bool>
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define popb pop_back
#define all(v) v.begin(),v.end()
#define mset(v, x) memset(v, x, sizeof(v))
#define mset2d(v, x, n) memset(v, x, sizeof(v[0][0]) * n * n)
#define mset2dd(v, x, n, m) memset(v, x, sizeof(v[0][0]) * n * m)
#define debug(x) cout<<#x<<" : "<<x<<endl
#define debug2(x,y) cout<<#x<<" : "<<x<<" & "<<#y<<" : "<<y<<endl
#define test() cout<<"hola papa"<<endl
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
using namespace std;

/*
* Z array generated by z function will store 
* length of the longest substring starting from
* s[i] which is also a prefix from s[0 .. n - 1]
*/
vi zfunction(string s) {
    int l = 0, r = 0, k;
    vi z(sz(s));
    z[0] = 0;

    for (int i = 1; i < sz(s); ++i) {
        if (i > r) {
            l = r = i;
            while (r < sz(s) && s[r - l] == s[r]) {
                ++r;
            }
            z[i] = r - l;
            --r;
        } else {
            k = i - l;
            if (z[k] < r - i + 1) {
                z[i] = z[k];
            } else {
                l = i;
                while (r < sz(s) && s[r - l] == s[r]) {
                    ++r;
                }
                z[i] = r - l;
                --r;
            }
        }
    }

    return z;
}

/*
* With the aim of looking for pattern in the text
* we are going to concatenate both strings using
* an unknown character in the middle, such as '$',
* and after that the z array will be created for
* this new string. In z array are stored the length 
* of the longest substring starting from i which is a 
* prefix (it means, which is the pattern because string 
* used for computation of z array was pattern + "$" + text).
* So if we are looking for a matching, is only needed to
* check if there is a prefix with the same length as pattern
* starting from index pattern + 1.
* It is easy to note that the complexity of this algorithm is
* O(n + m) where n is the length of text and m the length of
* pattern.
*/
vi search(string pattern, string text) {
    vi z = zfunction(pattern + "$" + text);
    vi matchings;
    for (int i = sz(pattern) + 1; i < sz(z); ++i) {
        if (z[i] == sz(pattern)) {
            matchings.pb(i - sz(pattern) - 1);
        }
    }
    return matchings;
}

string pattern, text;

int main() {
    cout << "Pattern : ";
    cin >> pattern;
    cout << "\nLook for pattern in this text : ";
    while (cin >> text) {
        vi matchings = search(pattern, text);
        if (sz(matchings) == 0) {
            cout << "Pattern not found in this text";
        } else {
            for (int i = 0; i < sz(matchings); ++i) {
                cout << "* Pattern was found at index : " << matchings[i] << "\n";
            }
        }
        cout << "\nLook for pattern in this text : ";
    }
}

